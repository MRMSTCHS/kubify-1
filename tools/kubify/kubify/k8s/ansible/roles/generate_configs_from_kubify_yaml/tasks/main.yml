---
- name: Update .dockerignore
  lineinfile:
    path: "{{ app_dir }}/.dockerignore"
    state: present
    create: yes
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^\*.swp', line: '*.swp' }
    - { regexp: '^/kubify\.yml', line: '/kubify.yml'}
    - { regexp: '^/secrets', line: '/secrets'}
    - { regexp: '^/config', line: '/config'}

- name: Check if project has custom dev Dockerfile
  stat:
    path: "{{ app_dir }}/Dockerfile.dev"
  register: custom_dev_docker_stat_result

- name: Check if project has custom build Dockerfile
  stat:
    path: "{{ app_dir }}/Dockerfile.build"
  register: custom_build_docker_stat_result

- name: Generate Dockerfiles
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "templates/Dockerfile.dev.j2",  dest: "{{ app_kubify_dir }}/Dockerfile.dev" }
    - { src: "templates/Dockerfile.build.j2", dest: "{{ app_kubify_dir }}/Dockerfile.build" }
  when: custom_dev_docker_stat_result.stat.exists == False and custom_build_docker_stat_result.stat.exists == False

- name: Copy Dockerfiles
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "{{ app_dir }}/Dockerfile.dev",  dest: "{{ app_kubify_dir }}/Dockerfile.dev" }
    - { src: "{{ app_dir }}/Dockerfile.build", dest: "{{ app_kubify_dir }}/Dockerfile.build" }
  when: custom_dev_docker_stat_result.stat.exists == True and custom_build_docker_stat_result.stat.exists == True

- name: Ensure config directory exists
  file:
    path: "{{ app_dir }}/config/"
    state: directory

- name: Checkout config
  shell: git checkout {{ app_config_sha }} {{ item }}
  with_items:
    - "{{ app_dir }}/config"
    - "{{ app_dir }}/secrets"
  when: app_config_sha != ""

- name: Generate manifests
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "templates/skaffold.yaml.j2",         dest: "{{ app_kubify_dir }}/skaffold.yaml" }
    - { src: "templates/deployment.yaml.j2",       dest: "{{ app_manifests }}/deployment.yaml" }
    - { src: "templates/service.yaml.j2",          dest: "{{ app_manifests }}/service.yaml" }
    - { src: "templates/ingress.yaml.j2",          dest: "{{ app_manifests }}/ingress.yaml" }
    - { src: "templates/database.yaml.j2",         dest: "{{ app_manifests }}/database.yaml" }
    - { src: "templates/cron.yaml.j2",             dest: "{{ app_manifests }}/cron.yaml" }
    - { src: "templates/generated-config.yaml.j2", dest: "{{ app_manifests }}/generated-config.yaml" }
  vars:
    app_manifests: "{{ app_kubify_dir }}/manifests"
    manifests_glob:
      - "../../{{ kubify_dir | basename }}/{{ env }}/{{ app_name }}/manifests/*" # skaffold needs a relative path to the manifests
      - "../../{{ app_type }}/{{ app_name }}/config/*.{{ profile }}.yaml"
      # TODO should we comment this? currently doesnt pass validation with it uncommented (since the upgrade to new kuberenets and skaffold)
      #- "../../{{ app_type }}/{{ app_name }}/kubify.yml"

- name: Create secrets dir (if not exist)
  shell: "mkdir -p {{ app_dir }}/secrets"
  ignore_errors: yes 

# - name: Check if secret exists
#   stat:
#     path: "{{ app_dir }}/secrets/secrets.{{ profile }}.enc.yaml"
#   register: secret_file_exists

# - name: Check secrets file exists (create common secret context if not)
#   shell: "cp {{ app_dir }}/../../tools/common/secrets/secrets.{{ profile }}.enc.yaml {{ app_dir }}/secrets/secrets.{{ profile }}.enc.yaml && sed -i bak -e 's|common|'\"{{ app_name }}\"'|g' \"${SECRETS_FILE}\" && "
#   when: secret_file_exists.stat.exists == false

- name: Decrypt secrets
  shell: "kubesec decrypt {{ item.src }} > {{ item.dest }}"
  with_items:
    - { src: "{{ app_dir }}/secrets/secrets.{{ profile }}.enc.yaml", dest: "{{ app_kubify_dir }}/manifests/secrets.yaml"}